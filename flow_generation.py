import pandas as pd
from tqdm import tqdm
import json


def fetchDataFromRaw(record,raw_df):
   

    org_at=record['datetime'] # Origin arriving time
    org_lt=record['leaving_datetime'] # origin leaving time
    dest_at=record['dest_at'] # destination arriving time

    stay_points=json.dumps(raw_df.loc[(record['uid'],org_at):(record['uid'],org_lt)][['lat','lng']].values[0:-1].tolist()) # points inside the stop nodes= all the points between the time of first point inside cluster and time of first point outside the cluster
    trip_points=json.dumps(raw_df.loc[(record['uid'],org_lt):(record['uid'],dest_at)][['lat','lng']].values[0:-1].tolist())# points in between two stop nodes= all the points between the time of first point outside the origin stay node and the time of first point inside the destination stop node

    stay_duration= round((org_lt-org_at).total_seconds()/60) # How long stay inside the stop node (calculated using the leaving time generated by Scikit-mob)= The time of the first point outside the stop node - the time of the first point inside the stop node
    org_last_point_time=raw_df.loc[(record['uid'],org_at):(record['uid'],org_lt)][['lat','lng']].index.tolist()[-2][1] # Time of the last point inside the stop node
    observed_stay_duration=(org_last_point_time-org_at).total_seconds()/60 # observed stay= The time of the last point inside the stop node - the time of the first point inside the stop node

    trip_time= round((dest_at-org_lt).total_seconds()/60) # Trip time= destination arrival time - orgin leaving time

    temp=[
        record['uid'],
        record['org_lat'],#org_lat,
        record['org_lng'],#org_lng,
        org_at,
        org_lt,
        record['dest_lat'],#dst_lat,
        record['dest_lng'],#dst_lng,
        dest_at,
        stay_points,
        trip_points,
        trip_time,
        stay_duration,
        observed_stay_duration
    ]
    
    
    

    return temp


def processFlowGenration(stdf,raw_df):


    flow_df=[]
    cols=[
            'uid',
            'org_lat',
            'org_lng',
            'org_arival_time',
            'org_leaving_time',
            'dest_lat',
            'dest_lng',
            'dest_arival_time',
            'stay_points',
            'trip_points',
            'trip_time',
            'stay_duration',
            'observed_stay_duration'
        ]
    for ind, row in tqdm(stdf.iterrows()):
        flow_df.append(fetchDataFromRaw(row,raw_df))

    # Converting list to Dataframe
    flow_df=pd.DataFrame(flow_df,columns=cols)
    
    return flow_df

def generateFlow(stdf,raw_df):
    return processFlowGenration(stdf,raw_df)